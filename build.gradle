plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.12,6.2)'
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = mod_version
group = mod_group_id

base {
    archivesName = archives_base_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
	maven { url 'https://www.cursemaven.com' }
}

configurations {
    library
    shade
    implementation.extendsFrom library
    shade.extendsFrom library
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    generateRunFolders = true

    runs {
        configureEach {
            workingDirectory project.file("run/${it.name}")
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
            taskName 'logbegone-neo-1.20_client'
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
            taskName 'logbegone-neo-1.20_server'
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

dependencies {
    minecraft "net.neoforged:forge:${minecraft_version}-${neo_version}"
  	compileOnly "org.apache.logging.log4j:log4j-core:2.17.+"
  	compileOnly 'org.jetbrains:annotations:22.+'
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_description: mod_description, 
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "AzureDoom",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "AzureDoom",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' 
}

if (file('key.properties').exists()) {
    curseforge {
    	def curseProp = new Properties()
    	File secretPropsFile = file("key.properties")
    	curseProp.load(secretPropsFile.newInputStream())
    	project {
        	apiKey = curseProp.getProperty('curseKey')
        	id = "623560"
        	releaseType = "release"
        	changelogType = 'text'
        	changelog = file('CHANGELOG.txt')
        	addGameVersion("1.20.1")
			addGameVersion("NeoForge")
			addGameVersion("Java 17")
    	}
    	options {
        	forgeGradleIntegration = false
    	}
    }
}

if (file('key.properties').exists()) {
	modrinth {
		def modrinthProp = new Properties()
		File secretPropsFile = file("key.properties")
		modrinthProp.load(secretPropsFile.newInputStream())
		
		token = modrinthProp.getProperty('modrinthKey')
		projectId = '9ON3zv6e' 
		versionNumber = project.mod_version 
		uploadFile = jar 
		changelog = rootProject.file("changelog.txt").text
		gameVersions = ['1.20.1']
		loaders = ['neoforge']
	}
}
